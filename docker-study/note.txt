前言安装：
    1、下载路径： https://download.docker.com/linux/static/stable/
    2、解压安装二进制版本（一般是 root 启动，也可以创建 docker 用户组(推荐)）
    3、安装成功后： 
        运行：$ docker run -it --rm -p 4000:80 ccr.ccs.tencentyun.com/dockerpracticesig/docker_practice
        (如果有权限访问问题：请参考 https://www.cnblogs.com/niuben/p/11226290.html)
        浏览器打开： localhost:4000  （这是一个离线的 docker 教程，以下笔记摘录于此）


一、为什么要用 Docker
    - 更高效的利用系统资源
    - 更快速的启动时间
    - 一致的运行环境
    - 持续交付和部署
    - 更轻松的迁移
    - 更轻松的维护和扩展

二、基本概念
镜像：
    Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
    Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层
容器：
    容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间
    每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 容器存储层
仓库：
    一个集中的存储、分发镜像的服务。

三、使用 Docker 镜像
    Docker 运行容器前需要本地存在对应的镜像，如果本地不存在该镜像，Docker 会从镜像仓库下载该镜像。

四、下载镜像：
    docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]
    - Docker 镜像仓库地址：地址的格式一般是 <域名/IP>[:端口号]。默认地址是 Docker Hub。
    - 仓库名：如之前所说，这里的仓库名是两段式名称，即 <用户名>/<软件名>。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。

五、运行镜像：
    docker container run -it --rm ubuntu:18.04 bash
    - -it：这是两个参数，一个是 -i 交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。
    - --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 --rm 可以避免浪费空间。
            ubuntu:18.04：这是指用 ubuntu:18.04 镜像为基础来启动容器。
    - bash：放在镜像名后的是 命令，这里我们希望有个交互式 Shell，因此用的是 bash。

六、列出镜像：
    docker image ls    注意：镜像在 hub 上是压缩的，所以大小不匹配
    docker system df    占用空间

七、虚悬镜像：
    除了 docker pull 可能导致这种情况，docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取消，从而出现仓库名、标签均为 <none> 的镜像。这类无标签镜像也被称为 虚悬镜像(dangling image) 
    列出：docker image ls -f dangling=true   （-f 是 filter 参数）
    删除：docker image prune

八、中间层镜像：
    显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数, 是其它镜像所依赖的镜像，不能删除。
    列出： docker image ls -a

九、删除镜像：
    docker image rm [选项] <镜像1> [<镜像2> ...
    docker image rm $(docker image ls -q redis)]

十、commit 理解镜像构成（慎用）
    镜像是多层存储，每一层是在前一层的基础上进行的修改；而容器同样也是多层存储，是在以镜像为基础层，在其基础上加一层作为容器运行时的存储层。
    docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]

十一、构建镜像 Build image
    $ docker build -t test:latest .
     -f 制定 Dockerfile 路径
     -t 镜像名称
     . 代表 构建的上下文路径
     说明： 当构建的时候，用户会指定构建镜像上下文的路径，docker build 命令得知这个路径后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件
     特例： 可以用 .dockerignore 忽略上传文件

十二、Dockerfile 详解：
    Dockerfile 是一个文本文件，其内包含了一条条的 指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。
    FROM 指定了基础镜像
    - 服务类镜像：nginx、redis、mongo、mysql、httpd、php、tomcat
    - 开发类镜像：node、openjdk、python、ruby、golang
    - 操作系统镜像：ubuntu、debian、centos、fedora、alpine
    - 特殊镜像：scratch 表示空白镜像(对于 Linux 下静态编译的程序来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 FROM scratch 会让镜像体积更加小巧)

    RUN 执行命令 
    - shell 格式：RUN <命令>，就像直接在命令行中输入的命令一样
      RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
    - exec 格式：RUN ["可执行文件", "参数1", "参数2"]，这更像是函数调用中的格式。
    使用一个 RUN 指令，并使用 && 将各个所需命令串联起来，可以精简层数。

    构建镜像：
    docker build -t test:latest . 

    - COPY 复制文件
        格式： COPY [--chown=<user>:<group>] <源路径>... <目标路径>
        说明： 使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等

    - ADD 更高级的复制文件
        格式： ADD [--chown=<user>:<group>] <源路径>... <目标路径>
        说明： ADD 指令将会自动解压缩这个压缩文件到 <目标路径> 去。因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。

    - CMD 容器启动命令
        格式： shell 格式： CMD <命令>
              exec 格式： ["可执行文件", "参数1", "参数2" ...]
              参数列表格式：CMD ["参数1", "参数2"...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。
        说明： 等同于 RUN

    - ENTRYPOINT 入口点
        格式： <ENTRYPOINT> "<CMD>" 当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等   
        注意： 通常情况下，跟在镜像名后面的是 command。
        说明： 等同于 RUN

    - ENV 设置环境变量
        格式： ENV <key> <value>
              ENV <key1>=<value1> <key2>=<value2>...
        举例：
            ENV VERSION=1.0 DEBUG=on \
                NAME="Happy Feet"

    - ARG 构建参数
        格式： ARG <参数名>[=<默认值>]
        说明： ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。该默认值可以在构建命令 docker build 中用 --build-arg <参数名>=<值> 来覆盖

    - VOLUME 定义匿名卷
        格式： VOLUME ["<路径1>", "<路径2>"...]
              VOLUME <路径>
        说明： /data 目录就会在运行时自动挂载为匿名卷，任何向 /data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。
        使用： docker run -d -v mydata:/data xxxx

    - EXPOSE 声明端口
        格式： EXPOSE <端口1> [<端口2>...]
        作用： 指令是声明运行时容器提供服务端口，这只是一个声明。
        说明： 一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射
        使用： -p <宿主端口>:<容器端口>，就是将容器的对应端口服务公开给外界访问。

    - WORKDIR 指定工作目录
        格式： WORKDIR <工作目录路径>
        作用： 不同镜像层之间的环境状态，修改后续层级工作目录的命令。
        说明： 使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。
        使用： 需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。
    
    - USER 指定当前用户
        格式： USER <用户名>[:<用户组>]
        作用： USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。
        说明： 使用切换用户的功能，需要使用 gosu
        使用： 

    - HEALTHCHECK 健康检查
        格式： HEALTHCHECK [选项] CMD <命令>：设置检查容器健康状况的命令
              HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令
        作用： 指令是告诉 Docker 应该如何进行判断容器的状态是否正常
        说明： 通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。
        使用： --interval=<间隔>：两次健康检查的间隔，默认为 30 秒；
              --timeout=<时长>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；
              --retries=<次数>：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。

十三、Dockerfile 多阶段构建
    Dockerfile 样例文件：
        FROM golang:1.9-alpine as builder
        RUN apk --no-cache add git
        WORKDIR /go/src/github.com/go/helloworld/
        RUN go get -d -v github.com/go-sql-driver/mysql
        COPY app.go .
        RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

        FROM alpine:latest as prod
        RUN apk --no-cache add ca-certificates
        WORKDIR /root/
        COPY --from=0 /go/src/github.com/go/helloworld/app .
        CMD ["./app"]

    优势： 可以解决镜像过大的问题
    参数说明： 
        $ docker build --target builder -t username/imagename:tag .
            只构建 --target builder 阶段

        从其他镜像拷贝文件： COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf
        
十四、镜像的导入和导出
    保存：$ docker save alpine -o filename
         $ file filename
           filename: POSIX tar archive

         $ docker save alpine | gzip > alpine-latest.tar.gz
    载入：$ docker load -i alpine-latest.tar.gz  

十五、容器操作
    启动容器：1、基于镜像新建一个容器并启动
            2、将在终止状态（stopped）的容器重新启动
            （因为容器太轻量级别，所以停止的时候一般会删除）
            $ docker run ubuntu:18.04 /bin/echo 'Hello world'
            常用参数：
                -i: 交互式启动容器，可以进入容器内部
                -t: 类似于 tty 伪终端
                -d: 后台启动
                --rm: 停止后直接删除容器    
            $ docker container start ${containerid}

        当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：
           - 检查本地是否存在指定的镜像，不存在就从公有仓库下载
           - 利用镜像创建并启动一个容器
           - 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层
           - 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去
           - 从地址池配置一个 ip 地址给容器
           - 执行用户指定的应用程序
           - 执行完毕后容器被终止

    进入容器：
            $ docker exec -it ${containerid}

    删除镜像：
            $ docker container rm ${containerid}
    
    删除停止的镜像：
            $ docker container prune
    
十六、docker 数据管理（重要）：
    两种管理方式：
        1、数据卷
        2、挂载主机目录
    
    数据卷：
        数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：
        1、数据卷可以在容器之间共享和重用
        2、对数据卷的修改会立马生效
        3、对数据卷的更新，不会影响镜像
        4、数据卷默认会一直存在，即使容器被删除
        创建一个数据卷： $ docker volume create my-vol 
        查看所有数据卷： $ docker volume ls    
        查看数据卷的信息： $ docker volume inspect my-vol
        删除数据卷： $ docker volume rm my-vol
        挂载容器： $ docker run -d -P --name web --mount source=my-vol, target=/webapp trainning/webapp python app.py

    挂载主机目录：
        $ docker run -d -P --name web --mount type=bind,source=/src/webapp,target=/opt/webapp trainning/webapp python app.py
        (本地目录必须是绝对路径， source 为本机路径，默认权限读写，可加 ,readonly, 也可以挂载具体文件)

十七：外部访问容器
    -P 参数： Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口
    -p 参数： 则可以指定要映射的端口，在一个指定端口上只可以绑定一个容器。支持的格式有 ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort。
    样例：
        $ docker run -d -p 5000:5000 training/webapp python app.py
        (本地端口：容器内部端口)
        
        $ docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py

        $ docker run -d -p 127.0.0.1::5000 training/webapp python app.py
        (映射了一个任意端口)

        $ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
        (指定 udp 协议)

        $ docker run -d -p 5000:5000 -p 3000:80 training/webapp python app.py
        (多端口)

十八、容器互联
    将容器加入自定义的 Docker 网络来连接多个容器
    新建网络：
        $ docker network create -d bridge my-net
        参数说明： -d 指定网络类型 (bridge , overlay)
    
    连接容器：
        $ docker run -it --rm --name busybox1 --network my-net busybox sh
        $ docker run -it --rm --name busybox2 --network my-net busybox sh

十九、配置 DNS
    略
二十、高级网络
    略
